.. toctree::

Tutorial
========

red-fab-deploy is better used with django project created by red-start.


For the impatient
=================

``
    fab api.add_server:type=db_server  (create instance and set up database server)
    fab api.add_server:type=slave_db   (set up slave db server with streaming replication)
    fab api.add_server:type=app_server (create instance and set up app server)
    fab setup.lb_server                (set up the elastic load balancer)
``

Introduction
=============

In this tutorial, we have a django app developed by our intelligent developers, and now we are ready to deploy it on powerful cloud servers hosted at the data center of Joyent.  The architecture of the servers will be laid out like the following.

    * A nginx load balancer distributing requests to
    * Two django app servers.  On the app servers, nginx will server pages generated by django and gunicorn.
    * The two app servers will talk to a master database server running PostgreSQL.
    * To make sure our data is always available and secure, we will set up another slave database server which keep a copy of data by streaming replication.

This sounds like one or two days work for you sitting in front of your computers, with sour wraist and headache caused by hundreds of confusing parameters.  However, with red-fab-deploy, you may get it done in a breeze.

Here is how we do it.

Set up your joyent account
==========================

To use red-fab-deploy, you need to set up your joyent account so that you can login to the servers you or your team members created at joyent data center.

Create your ssh key by running

``ssh-keygen -t rsa``

and hit return for a few times.  Find the id_rsa.pub file under ~/.ssh/ directory, and add all texts inside it into your joyent account (login to joyent, click 'my account', and 'ssh keys' tab should be on the account settings page.)

Create fabfile
===============

Create a file named 'fabfile.py' under the root directory of your project, with the following contents.
::
    import os
    from fabric.api import env
    from fab_deploy import *
    from fab_deploy.joyent import *

    env.joyent_account = 'xxxxx'
    env.joyent_default_data_center = 'xxxxx'
    setup_env(os.path.abspath(os.path.dirname(__file__)))

and replace 'xxxxx' with your correct settings. You may choose to ignore 'joyent_account' and 'joyent_default_data_center' here, and pass values to these two parameters from command line.

Now by running

``fab --list``

You should see a list of fab commands which we are going to use.


Create ssh key pair (only for Amazon AWS service)
=================================================

Run
``fab api.create_key``

A key pair will be created and registered in the file you specified in env.AWS_CREDENTIAL.  You will need this key pair to access all EC2 instances, so please keep it well.

For joyent instances, you don't need to do this. But you need to add your ssh key into your joyent account.


Set up master database server
==============================

If you didn't specify joyent_account and joyent_default_data_center when in fabfile.py, you can do it here by attaching additional parameters on the command above.

When an server instance is created on the remote data center, you will see its IP address get displayed on your screen. Make sure that you note it down.

'api.add_server' will create a machine at Joyent data center, and then execute 'setup.xxxxx' task to set up servers.  'xxxx' can be the following types,

    * 'lb_server':  load balancer server
    * 'app_server': django app server
    * 'db_server':  database server
    * 'slave_db':   slave database
    * 'dev_server': development server (with database and django app on the same machine, usually for development and testing purpose)

Under the hood, task 'setup.xxxx' just call and execute related tasks and register related information into $PROJECT_ROOT/deploy/server.ini file, when each type of these servers get created.

If this task failed by accident in the midst, you can try run

``fab setup.xxxx -H admin@ip-address-of-server-instance``

to finish the setup.  Don't repeat 'api.add_server', because server instance has been created and is alive.

Run
``fab api.add_server:type=db_server``

and postgresql package will be installed on the newly created server instance, and the basic parameters (postgresql.conf) and authentication (pg_hba.conf) will be set up. During the process, you will be prompted to create a databse user and password.  After the process is finished, related information (server-ip, database username etc) will be recorded in server.ini file.


Install pgbouncer on the database server (Optional)
=========================================

``fab postgres.setup_pgbouncer  -H admin@ip-address-of-the-database-server``


Set up slave database server with streaming replication
========================================================
Add [slave-db] with allowed-sections and restricted-ports to servers.ini file.


``fab api.add_server:type=slave_db``

Under the hood, fab read info of master database server from server.ini, created server instance, install packages, and set up master-slave streaming replication.


Set up app_server
==================

``fab api.add_server:type=app_server``

Run this command twice to set up two app servers.  This command will create server instance, install packages like nginx and python, set up python virtual environment, set up git repo, push the project source code to the server instance, and install all required third parity packages.  Firewall will be updated as well.


Set up the load balancer server
================================

Run

``fab api.add_server:type=lb_server``


Commit files modified by fab tasks
==================================

Fab tasks could alter a few configuration files on your local machine.

When an instance is created and set up, its IP info and security policy will be updated in server.ini file.

If joyent is used, app_server, db_server, dev_server will generate configuration files for ipfilter under deploy/ipf drectory.

If joyent is used, setup.lb_server and setup.app_server will change nginx-lb.conf and nginx.conf.

It's your responsibility to check the updated files and manually commit the changes.


Other Note
==============

The procedures described above should set up a nice environment for you to run your django app. In the future, if you update your source code, you may run

``fab deploy:branch=xxx -H admin@ip-address-of-the-app-server``

to push the change to the remote app server.

If some data tables need to be created/changed, you can run

``fab migrate -H admin@ip-address-of-the-app-server``

to migrate the database via 'south'

